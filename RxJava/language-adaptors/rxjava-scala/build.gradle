apply plugin: 'scala'
apply plugin: 'osgi'

tasks.withType(ScalaCompile) {
	scalaCompileOptions.fork = true
    scalaCompileOptions.unchecked = true
    scalaCompileOptions.setAdditionalParameters(['-feature'])

    configure(scalaCompileOptions.forkOptions) {
        memoryMaximumSize = '1g'
        jvmArgs = ['-XX:MaxPermSize=512m']
    }
}

sourceSets { 
    test { 
        scala { 
            srcDir 'src/main/scala'
        }
    }
}

dependencies {
    compile 'org.scala-lang:scala-library:2.10.+'

    compile project(':rxjava-core')
    
    provided 'junit:junit-dep:4.10'
    provided 'org.mockito:mockito-core:1.8.5'
    provided 'org.scalatest:scalatest_2.10:1.9.1'
}

tasks.compileScala {  
    classpath = classpath + (configurations.compile + configurations.provided)
}

task test(overwrite: true, dependsOn: testClasses) << {
    ant.taskdef(name: 'scalatest',
            classname: 'org.scalatest.tools.ScalaTestAntTask',
            classpath: configurations.provided.asPath + ':' + configurations.testRuntime.asPath + ":" + compileScala.destinationDir
    )
    ant.scalatest(runpath: sourceSets.test.output.classesDir,
            haltonfailure: 'true',
            fork: 'false') {reporter(type: 'stdout')}
}

jar {
    manifest {
        name = 'rxjava-scala'
        instruction 'Bundle-Vendor', 'Netflix'
        instruction 'Bundle-DocURL', 'https://github.com/Netflix/RxJava'
        instruction 'Import-Package', '!org.junit,!junit.framework,!org.mockito.*,*'
        instruction 'Fragment-Host', 'com.netflix.rxjava.core'
    }
}
